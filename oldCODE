package com.example.runbuddy;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageManager;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.example.runbuddy.databinding.ActivityMainBinding;

public class MainActivity extends AppCompatActivity implements SensorEventListener {
    private static final int ACCELEROMETER_PERMISSION_REQUEST_CODE = 1002;
    private ActivityMainBinding binding;
    private SensorManager sensorManager;
    private Sensor accelerometer;
    private float[] acceleration = new float[3];
    private float peakAcceleration = 0.0f; // Stores the peak acceleration
    private int peakCount = 0; // Counts the number of peaks
    private long startTime = 0; // Time when running started
    private float currentSpeed = 0.0f;
    private long lastUpdate = 0;
    private boolean runActive = false;
    TextView speedTextView;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        speedTextView = findViewById(R.id.speedTextView);

        binding.startRunButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                binding.startRunButton.setVisibility(View.GONE);
                binding.pauseRunButton.setVisibility(View.VISIBLE);
                binding.endRunButton.setVisibility(View.VISIBLE);
                binding.speedTextView.setVisibility(View.VISIBLE);

                Toast.makeText(MainActivity.this, "New run started.", Toast.LENGTH_SHORT).show();

                runActive = true;
                startNewRun();
            }
        });

        binding.pauseRunButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                binding.startRunButton.setVisibility(View.GONE);
                binding.pauseRunButton.setVisibility(View.GONE);
                binding.endRunButton.setVisibility(View.VISIBLE);
                binding.resumeRunButton.setVisibility(View.VISIBLE);
                binding.speedTextView.setVisibility(View.GONE);

                Toast.makeText(MainActivity.this, "Run paused.", Toast.LENGTH_SHORT).show();

                runActive = false;
                onPause();
            }
        });

        binding.endRunButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                binding.startRunButton.setVisibility(View.VISIBLE);
                binding.pauseRunButton.setVisibility(View.GONE);
                binding.endRunButton.setVisibility(View.GONE);
                binding.resumeRunButton.setVisibility(View.GONE);
                binding.speedTextView.setVisibility(View.GONE);

                Toast.makeText(MainActivity.this, "Run stopped.", Toast.LENGTH_SHORT).show();

                runActive = false;
                stopRun();
            }
        });

        binding.resumeRunButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                binding.startRunButton.setVisibility(View.GONE);
                binding.pauseRunButton.setVisibility(View.VISIBLE);
                binding.endRunButton.setVisibility(View.VISIBLE);
                binding.resumeRunButton.setVisibility(View.GONE);
                binding.speedTextView.setVisibility(View.VISIBLE);

                Toast.makeText(MainActivity.this, "Run resumed.", Toast.LENGTH_SHORT).show();

                runActive = true;
                onResume();
            }
        });
    }

    private void startAccelerometer() {
        if (accelerometer != null && runActive) {
            sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_NORMAL);
            startTime = System.currentTimeMillis();
            peakCount = 0;
            peakAcceleration = 0.0f;
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (runActive && accelerometer != null) {
            sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_NORMAL);
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        if (runActive) {
            sensorManager.unregisterListener(this);
        }
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            acceleration = event.values;
            float currentAcceleration = (float) Math.sqrt(acceleration[0] * acceleration[0] + acceleration[1] * acceleration[1] + acceleration[2] * acceleration[2]);

            // Detect peak acceleration (assuming positive for running)
            if (currentAcceleration > peakAcceleration) {
                peakAcceleration = currentAcceleration;
            }

            updateSpeed();
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {
        // ...
    }

    /*
    @SuppressLint("SetTextI18n")
    private void updateSpeed() {
        if(runActive) {
            long now = System.currentTimeMillis();
            float timeDelta = (now - lastUpdate) / 1000.0f;

            float totalAcceleration = (float) Math.sqrt(acceleration[0] * acceleration[0] + acceleration[1] * acceleration[1] + acceleration[2] * acceleration[2]);

            float newSpeed = lastSpeed + (totalAcceleration * timeDelta);

            lastSpeed = newSpeed;
            lastUpdate = now;
        }
    }
    */

    private void updateSpeed() {
        if (runActive) {
            long now = System.currentTimeMillis();
            float timeDelta = (now - startTime) / 1000.0f;

            // Estimate speed based on number of peaks and average peak value (adjust threshold as needed)
            if (peakAcceleration > 7.0f) { // Adjust threshold based on testing
                peakCount++;
            }

            if (peakCount > 0) {
                currentSpeed = (peakCount * 0.5f) / timeDelta; // Adjust coefficient based on testing
            } else {
                currentSpeed = 0.0f;
            }

            lastUpdate = now;
            speedTextView.setText("Current Speed: " + String.format("%.2f", currentSpeed) + " m/s");
        }
    }

    private void startNewRun() {
        sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
        if (sensorManager != null) {
            accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        }

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.BODY_SENSORS) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.BODY_SENSORS}, ACCELEROMETER_PERMISSION_REQUEST_CODE);
        } else {
            startAccelerometer();
        }
    }


    private void stopRun() {
        if (sensorManager != null) {
            sensorManager.unregisterListener(this);
        }

        currentSpeed = 0.0f;
        lastUpdate = 0;
    }

}
